1.

- 2 tipuri de date simple si un tip de date definit de utilizator:
int, float, std::string

- instructiuni:
o instructiune de atribuire: cu operatorul = (ex: int a = 5;)
o instructiune de intrare/iesire: folosind cin/cout (ex: cin >> a; cout << a;)
o instructiune de selectie (conditionala): folosind if (ex: if (a > 0) {...})
o instructiune de ciclare: folosind for (ex: for (int i = 0; i < 10; i++) {...})

- restrictia sa fie identificatori de lungime oarecare nedepasind 250 de caractere


- specificare:

Alfabet (pentru identificatori, constante, operatori, delimitatori):
litere mari si mici ale alfabetului englez (A-Z, a-z)
caracterele + - * / % = < > ! & | ^ $ ( ) { } ; , . ? : \ " '
cifrele 0-9

cuvinte rezervate: int, float, string, if, for, while, cin, cout, return, else, string, main, include, iostream

operatori:
aritmetici: + - * / %
de atribuire: =
de comparare: < > <= >= == !=
logici: && ||

delimitatori: ( ) { } ; ,



gramatica + reguli lexicale (BNF):
---


<program> ::= <includere> <functie_principala>

<includere> ::= '#include <iostream>'

<functie_principala> ::= 'int' 'main' '(' ')' '{' <lista_declaratii> <lista_instructiuni> <sfarsit_program> '}'

<sfarsit_program> ::= 'return' '0' ';'

<lista_declaratii> ::= <epsilon>
                      | <declaratie>
                      | <declaratie> <lista_declaratii>

<declaratie> ::= <tip> <lista_identificatori> ';'
<tip> ::= 'int' | 'float' | 'std::string'

<lista_identificatori> ::= <identificator>
                         | <identificator> ',' <lista_identificatori>

<lista_instructiuni> ::= <epsilon>
                        | <instructiune>
                        | <instructiune> <lista_instructiuni>

<instructiune> ::= <atribuire> ';'
                 | <citire> ';'
                 | <scriere> ';'
                 | <daca>
                 | <cattimp>
                 | <bloc>

<atribuire> ::= <identificator> '=' <expresie>

<citire> ::= 'std::cin' '>>' <cin_items>
<cin_items> ::= <identificator>
               | <identificator> '>>' <cin_items>

<scriere> ::= 'std::cout' '<<' <cout_items>
<cout_items> ::= cout_item
                | cout_item '<<' <cout_items>

<daca> ::= 'if' '(' <expresie> ')' <bloc> <altfel_op>
<altfel_op> ::= 'else' <bloc> | <epsilon>

<cattimp> ::= 'while' '(' <expresie> ')' <bloc>

<bloc> ::= '{' <lista_instructiuni> '}'

/* expresii */
<expresie> ::= <exp_relational>

<exp_relational> ::= <exp_add>
                   | <exp_add> <relop> <exp_add>

<exp_add> ::= <term>
            | <term> <addop> <exp_add>

<term> ::= <factor>
         | <factor> <mulop> <term>

<factor> ::= <lhs>
           | <const_int>
           | <const_float>
           | <const_string>
           | '(' <expresie> ')'

<addop> ::= '+' | '-'
<mulop> ::= '*' | '/' | '%'
<relop> ::= '<' | '<=' | '>' | '>=' | '==' | '!='

/* reguli lexicale */

/* max 250 caractere pentru identificatori */
<identificator> ::= <litera> 
                  | <litera> <ident_continua>

<ident_continua> ::= <caracter_id>
                   | <caracter_id> <ident_continua>

<caracter_id> ::= <litera> | <cifra>

<litera> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
           | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'

<cifra> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

/* constante */
<const_int> ::= <semn_opt> <cifre>
<semn_opt> ::= '+' | '-' | <epsilon>

<const_float> ::= <semn_opt> <cifre> '.' <cifre>

<const_string> ::= '"' <sir_caractere> '"'
<sir_caractere> ::= <epsilon> | <caracter_fara_quote> | <caracter_fara_quote> <sir_caractere>
<caracter_fara_quote> ::= orice caracter valid, cu exceptia "

<cifre> ::= <cifra> | <cifra> <cifre>

<epsilon> ::=    /* secventa vida */



In Class (Costin-Andrei Ghenea):

/* pus cattimp la instructiuni */

/* citiri/scrieri in stream */

<citire> ::= 'std::cin' '>>' <cin_items>
<cin_items> ::= <identificator>
               | <identificator> '>>' <cin_items>

<scriere> ::= 'std::cout' '<<' <cout_items>
<cout_items> ::= cout_item
                | cout_item '<<' <cout_items>

---



2.

- calculeaza perimetrul si aria cercului de o raza data: cerc.cpp
- determina cmmdc a 2 nr naturale: cmmdc.cpp
- calculeaza suma a n numere citite de la tastatura: suma.cpp

3.

- Unul dintre programe contine doua erori care sunt in acelasi timp erori in limbajul original (pentru care MLP defineste un subset): erori1.cpp

- Al doilea program contine doua erori conform MLP, dar care nu sunt erori in limbajul original. Se cere ca acesta sa fie compilat si executat in limbajul original ales: erori2.cpp


